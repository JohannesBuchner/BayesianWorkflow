
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace cepheid_v0_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 25> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 33, column 2 to column 13)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 34, column 2 to column 12)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 40, column 2 to column 20)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 41, column 2 to column 20)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 44, column 2 to column 33)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 47, column 2 to column 39)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 60, column 2 to column 21)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 63, column 2 to column 36)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 54, column 2 to column 34)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 10, column 2 to column 9)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 11, column 9 to column 11)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 11, column 2 to column 19)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 12, column 2 to column 15)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 13, column 9 to column 11)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 13, column 2 to column 20)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 14, column 2 to column 9)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 17, column 2 to column 12)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 18, column 9 to column 14)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 18, column 2 to column 28)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 23, column 2 to column 10)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 26, column 2 to column 26)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 40, column 9 to column 11)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 41, column 9 to column 11)",
 " (in '/Users/fran/projects/BayesianWorkflow/src/notebooks/stan/cepheid_v0.stan', line 60, column 9 to column 14)"};



class cepheid_v0_model final : public model_base_crtp<cepheid_v0_model> {

 private:
  int Nc;
  Eigen::Matrix<double, -1, 1> m_obs__;
  double sigma_m;
  Eigen::Matrix<double, -1, 1> log10P__;
  double z;
  int Ngrid;
  Eigen::Matrix<double, -1, 1> log10P_grid__;
  double dL; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> m_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> log10P{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> log10P_grid{nullptr, 0};
 
 public:
  ~cepheid_v0_model() { }
  
  inline std::string model_name() const final { return "cepheid_v0_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  cepheid_v0_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "cepheid_v0_model_namespace::cepheid_v0_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 10;
      context__.validate_dims("data initialization","Nc","int",
           std::vector<size_t>{});
      Nc = std::numeric_limits<int>::min();
      
      current_statement__ = 10;
      Nc = context__.vals_i("Nc")[(1 - 1)];
      current_statement__ = 11;
      validate_non_negative_index("m_obs", "Nc", Nc);
      current_statement__ = 12;
      context__.validate_dims("data initialization","m_obs","double",
           std::vector<size_t>{static_cast<size_t>(Nc)});
      m_obs__ = Eigen::Matrix<double, -1, 1>(Nc);
      new (&m_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(m_obs__.data(), Nc);
      
      
      {
        std::vector<local_scalar_t__> m_obs_flat__;
        current_statement__ = 12;
        m_obs_flat__ = context__.vals_r("m_obs");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          current_statement__ = 12;
          assign(m_obs, m_obs_flat__[(pos__ - 1)],
            "assigning variable m_obs", index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 13;
      context__.validate_dims("data initialization","sigma_m","double",
           std::vector<size_t>{});
      sigma_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      sigma_m = context__.vals_r("sigma_m")[(1 - 1)];
      current_statement__ = 14;
      validate_non_negative_index("log10P", "Nc", Nc);
      current_statement__ = 15;
      context__.validate_dims("data initialization","log10P","double",
           std::vector<size_t>{static_cast<size_t>(Nc)});
      log10P__ = Eigen::Matrix<double, -1, 1>(Nc);
      new (&log10P) Eigen::Map<Eigen::Matrix<double, -1, 1>>(log10P__.data(), Nc);
      
      
      {
        std::vector<local_scalar_t__> log10P_flat__;
        current_statement__ = 15;
        log10P_flat__ = context__.vals_r("log10P");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          current_statement__ = 15;
          assign(log10P, log10P_flat__[(pos__ - 1)],
            "assigning variable log10P", index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 16;
      context__.validate_dims("data initialization","z","double",
           std::vector<size_t>{});
      z = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      z = context__.vals_r("z")[(1 - 1)];
      current_statement__ = 17;
      context__.validate_dims("data initialization","Ngrid","int",
           std::vector<size_t>{});
      Ngrid = std::numeric_limits<int>::min();
      
      current_statement__ = 17;
      Ngrid = context__.vals_i("Ngrid")[(1 - 1)];
      current_statement__ = 18;
      validate_non_negative_index("log10P_grid", "Ngrid", Ngrid);
      current_statement__ = 19;
      context__.validate_dims("data initialization","log10P_grid","double",
           std::vector<size_t>{static_cast<size_t>(Ngrid)});
      log10P_grid__ = Eigen::Matrix<double, -1, 1>(Ngrid);
      new (&log10P_grid) Eigen::Map<Eigen::Matrix<double, -1, 1>>(log10P_grid__.data(), Ngrid);
      
      
      {
        std::vector<local_scalar_t__> log10P_grid_flat__;
        current_statement__ = 19;
        log10P_grid_flat__ = context__.vals_r("log10P_grid");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 19;
          assign(log10P_grid, log10P_grid_flat__[(pos__ - 1)],
            "assigning variable log10P_grid", index_uni(sym1__));
          current_statement__ = 19;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 20;
      dL = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      dL = ((3.0e5 * z) / 70.0);
      current_statement__ = 22;
      validate_non_negative_index("M_true", "Nc", Nc);
      current_statement__ = 23;
      validate_non_negative_index("m_true", "Nc", Nc);
      current_statement__ = 24;
      validate_non_negative_index("line", "Ngrid", Ngrid);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cepheid_v0_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta;
      beta = DUMMY_VAR__;
      
      current_statement__ = 2;
      beta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> M_true;
      M_true = Eigen::Matrix<local_scalar_t__, -1, 1>(Nc);
      stan::math::fill(M_true, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> m_true;
      m_true = Eigen::Matrix<local_scalar_t__, -1, 1>(Nc);
      stan::math::fill(m_true, DUMMY_VAR__);
      
      current_statement__ = 5;
      assign(M_true, add(alpha, multiply(beta, log10P)),
        "assigning variable M_true");
      current_statement__ = 6;
      assign(m_true, add(add(M_true, (5 * stan::math::log10(dL))), 25),
        "assigning variable m_true");
      {
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(m_obs, m_true, sigma_m));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cepheid_v0_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> M_true;
      M_true = Eigen::Matrix<double, -1, 1>(Nc);
      stan::math::fill(M_true, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> m_true;
      m_true = Eigen::Matrix<double, -1, 1>(Nc);
      stan::math::fill(m_true, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(alpha);
      vars__.emplace_back(beta);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      assign(M_true, add(alpha, multiply(beta, log10P)),
        "assigning variable M_true");
      current_statement__ = 6;
      assign(m_true, add(add(M_true, (5 * stan::math::log10(dL))), 25),
        "assigning variable m_true");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          vars__.emplace_back(M_true[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          vars__.emplace_back(m_true[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> line;
      line = Eigen::Matrix<double, -1, 1>(Ngrid);
      stan::math::fill(line, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      assign(line, add(alpha, multiply(beta, log10P_grid)),
        "assigning variable line");
      for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
        vars__.emplace_back(line[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta = context__.vals_r("beta")[(1 - 1)];
      vars__.emplace_back(alpha);
      vars__.emplace_back(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "beta", "M_true", "m_true",
      "line"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(Nc)},
      std::vector<size_t>{static_cast<size_t>(Nc)},
      std::vector<size_t>{static_cast<size_t>(Ngrid)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "M_true" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m_true" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "line" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "M_true" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m_true" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "line" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"M_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"transformed_parameters\"},{\"name\":\"m_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"transformed_parameters\"},{\"name\":\"line\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ngrid) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"M_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"transformed_parameters\"},{\"name\":\"m_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"transformed_parameters\"},{\"name\":\"line\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ngrid) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = cepheid_v0_model_namespace::cepheid_v0_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return cepheid_v0_model_namespace::profiles__;
}

#endif


